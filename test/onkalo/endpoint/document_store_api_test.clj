(ns onkalo.endpoint.document-store-api-test
  (:require [clojure.test :refer :all]
            [onkalo.endpoint.document-store-api :refer :all]
            [ring.mock.request :as mock]
            [ring.middleware.defaults :as defaults]
            [onkalo.metadata.elastic-api]
            [meta-merge.core :refer [meta-merge]]
            [onkalo.routing :refer :all]
            [onkalo.util.document-api-util :refer [HeavyStoreResponse]]
            [test-util.endpoint-commons :refer :all]
            [schema-generators.generators :as g]
            [cheshire.core :as json]))

(def elastic-search-response
  {:meta {:moreResultsAvailable false
          :from                 0
          :limit                30
          :count                1}
   :results [(g/generate HeavyStoreResponse)]})

(def ok-response
  {:status  200
   :headers json-type
   :body    (json/generate-string elastic-search-response)})

(def error-response
  {:status 500
   :headers json-type
   :body "{\"error\":\"Could not find organizations for document store API\"}"})

(def forbidden-response
  {:status 403
   :headers json-type
   :body "{\"error\":\"No access to organization 186-R\"}"})

(def forbidden-response-2
  {:status 403
   :headers json-type
   :body "{\"error\":\"Document is not public\"}"})

(def not-found-response
  {:status 404
   :headers json-type
   :body "{\"error\":\"Document not found\"}"})

(def handler (-> (document-store-api {:api-keys api-keys})
                 (defaults/wrap-defaults (meta-merge defaults/api-defaults {:responses {:content-types false}}))))

(defn endpoint [name]
  (str api-v2-root "/document-store/documents/" name))

(deftest docstore-user-does-not-need-to-specify-organizations-for-search-but-can
  (with-redefs-fn
    {#'onkalo.metadata.elastic-api/find-documents (fn [_ organization _ _ _ _ _ _]
                                                    (when (#{["753-R" "186-R"] ["186-R"]} organization)
                                                      elastic-search-response))
     #'onkalo.util.lupapiste-api/docstore-enabled-orgs (fn [_]
                                                         ["753-R" "186-R"])}
    #(do
       (is (= (decode-body (handler (-> (mock/request :get (endpoint "search") {:shape "20.0,60.0;20.0,67.0;27.0,67.0;27.0,60.0;20.0,60.0"})
                                        (mock/header "Authorization" docstore-user))))
              ok-response))
       (is (= (decode-body (handler (-> (mock/request :get (endpoint "search") {:shape "20.0,60.0;20.0,67.0;27.0,67.0;27.0,60.0;20.0,60.0"
                                                                                :organization "186-R"})
                                        (mock/header "Authorization" docstore-user))))
              ok-response)))))

(deftest coordinates-are-validated
  (with-redefs-fn
    {#'onkalo.util.lupapiste-api/docstore-enabled-orgs (fn [_]
                                                         ["753-R" "186-R"])
     #'onkalo.metadata.elastic-api/find-documents (fn [_ organization _ _ _ _ _ _]
                                                    (when (#{["753-R" "186-R"] ["186-R"]} organization)
                                                      elastic-search-response))}
    #(do
       (is (= (decode-body (handler (-> (mock/request :get (endpoint "search") {:shape "20.0;60.0"})
                                        (mock/header "Authorization" docstore-user))))
              {:status 400
               :headers json-type
               :body "{\"error\":\"Shape must be a single closed polygon, with the coordinates given like y1,x1;y2,x2;y3,x3;y4,x4;y1,x1 in WGS84 system. Multiple shape parameters may be used for multiple different polygons. Error: Value does not match schema: [(not (re-find #\\\"\\\\d{1,2}\\\\.\\\\d+,\\\\d{1,2}\\\\.\\\\d+\\\" \\\"20.0\\\")) (not (re-find #\\\"\\\\d{1,2}\\\\.\\\\d+,\\\\d{1,2}\\\\.\\\\d+\\\" \\\"60.0\\\"))]\"}"}))
       ; Check that a rather large shape works as well
       (is (= (decode-body (handler (-> (mock/request :get (endpoint "search") {:shape "21.298976,60.799267;21.298953,60.799263;21.298919,60.799257;21.298884,60.799251;21.298848,60.799248;21.298812,60.799247;21.298782,60.79925;21.298747,60.799255;21.298714,60.799263;21.298589,60.7993;21.298561,60.799307;21.298527,60.799314;21.298493,60.79932;21.298457,60.799324;21.298421,60.799327;21.298384,60.799329;21.298348,60.79933;21.298196,60.799326;21.298159,60.799327;21.298123,60.799329;21.298093,60.799333;21.298059,60.799339;21.297992,60.799354;21.297958,60.799361;21.297923,60.799366;21.29791,60.799368;21.297873,60.79937;21.297837,60.799371;21.2978,60.799369;21.297764,60.799367;21.297728,60.799363;21.297656,60.799355;21.297636,60.799353;21.297496,60.799333;21.297427,60.79932;21.297397,60.799314;21.297363,60.799307;21.297331,60.799299;21.297299,60.799289;21.297271,60.799278;21.297245,60.799265;21.297231,60.799257;21.297211,60.799241;21.297175,60.79921;21.297155,60.799195;21.297132,60.799181;21.297118,60.799175;21.29709,60.799163;21.297033,60.799141;21.297006,60.799129;21.296983,60.799115;21.296976,60.799109;21.296963,60.799093;21.296955,60.799075;21.296953,60.799057;21.29695,60.799022;21.296949,60.799014;21.296941,60.798942;21.296941,60.798924;21.296943,60.798907;21.296948,60.798889;21.296954,60.798873;21.296963,60.798856;21.296996,60.798804;21.297005,60.798789;21.297014,60.798771;21.297028,60.798736;21.297034,60.798718;21.297038,60.7987;21.297041,60.798683;21.297043,60.798665;21.297044,60.798651;21.297045,60.798579;21.297047,60.798561;21.297051,60.798543;21.297058,60.798526;21.297067,60.798508;21.29708,60.798491;21.297098,60.798473;21.297118,60.798458;21.297141,60.798444;21.297165,60.798431;21.297215,60.798405;21.297229,60.798398;21.297255,60.798385;21.297337,60.798349;21.297394,60.798327;21.297415,60.798319;21.297476,60.798299;21.297539,60.798281;21.297554,60.798276;21.29765,60.798251;21.297681,60.798241;21.297711,60.79823;21.297738,60.798218;21.29776,60.798208;21.297782,60.798193;21.297802,60.798178;21.297819,60.798162;21.297833,60.798146;21.297844,60.798129;21.297851,60.798111;21.297854,60.798093;21.297853,60.798075;21.297852,60.798071;21.297845,60.798053;21.29782,60.798001;21.297814,60.797983;21.297811,60.797965;21.297812,60.797957;21.297818,60.79794;21.297829,60.797923;21.297844,60.797906;21.297862,60.797891;21.297883,60.797876;21.297907,60.797863;21.297922,60.797856;21.29795,60.797844;21.297979,60.797833;21.298009,60.797823;21.298167,60.797777;21.298198,60.797766;21.298228,60.797755;21.298424,60.797674;21.298436,60.797669;21.298496,60.797648;21.298557,60.797628;21.298683,60.797592;21.298716,60.797583;21.298879,60.797542;21.299014,60.797514;21.29903,60.797511;21.299098,60.797497;21.299131,60.79749;21.299164,60.797481;21.299195,60.797472;21.299222,60.79746;21.299245,60.797446;21.299255,60.797439;21.299271,60.797423;21.299283,60.797406;21.29929,60.797388;21.299292,60.797371;21.299291,60.797353;21.299289,60.797343;21.299282,60.797325;21.299271,60.797308;21.299257,60.797292;21.299242,60.797275;21.299208,60.797244;21.299201,60.797237;21.299114,60.797158;21.299102,60.797146;21.299087,60.79713;21.29906,60.797096;21.299037,60.797062;21.299017,60.797028;21.299011,60.797016;21.298995,60.796981;21.298984,60.796945;21.298975,60.79691;21.298973,60.796894;21.298966,60.796859;21.29896,60.796841;21.298949,60.796824;21.298933,60.796808;21.298911,60.796794;21.298901,60.796789;21.298873,60.796778;21.298814,60.796756;21.298787,60.796744;21.298766,60.79673;21.29876,60.796721;21.298757,60.796704;21.298763,60.796686;21.298774,60.796669;21.298788,60.796652;21.298805,60.796636;21.298821,60.796622;21.298918,60.796546;21.298935,60.79653;21.298942,60.796524;21.298956,60.796507;21.298968,60.79649;21.298977,60.796473;21.298985,60.796455;21.298991,60.796438;21.298995,60.79642;21.298997,60.796402;21.298997,60.796389;21.298996,60.796371;21.298992,60.796353;21.298987,60.796336;21.29898,60.796318;21.298972,60.796301;21.298951,60.796266;21.298928,60.796232;21.298925,60.796229;21.298898,60.796196;21.298866,60.796163;21.298849,60.796147;21.29883,60.796132;21.29881,60.796117;21.298787,60.796103;21.298763,60.79609;21.298737,60.796077;21.298705,60.796064;21.298675,60.796053;21.298645,60.796043;21.298613,60.796034;21.298484,60.796001;21.29846,60.795994;21.298363,60.795968;21.29833,60.79596;21.298297,60.795953;21.298263,60.795946;21.298229,60.79594;21.298218,60.795939;21.298148,60.795928;21.298114,60.795922;21.298082,60.795912;21.298056,60.7959;21.298041,60.795887;21.298031,60.79587;21.298026,60.795853;21.298024,60.795835;21.298024,60.795822;21.298027,60.795804;21.298032,60.795786;21.298039,60.795769;21.298048,60.795751;21.298059,60.795734;21.298072,60.795718;21.298088,60.795699;21.298104,60.795682;21.298121,60.795666;21.298139,60.795651;21.298159,60.795636;21.29818,60.795621;21.298202,60.795607;21.298218,60.795598;21.298319,60.795546;21.298371,60.795518;21.298394,60.795504;21.298416,60.79549;21.298436,60.795475;21.298453,60.795459;21.298468,60.795443;21.29848,60.795428;21.298489,60.79541;21.298496,60.795393;21.298501,60.795375;21.298503,60.795357;21.298503,60.795344;21.2985,60.795326;21.298496,60.795308;21.298489,60.795291;21.298479,60.795274;21.298466,60.795257;21.29845,60.795241;21.298431,60.795225;21.298413,60.795213;21.298388,60.7952;21.298361,60.795188;21.298332,60.795177;21.298243,60.795146;21.298213,60.795136;21.298124,60.795105;21.298095,60.795094;21.298068,60.795082;21.298048,60.795072;21.298023,60.795059;21.298,60.795045;21.297979,60.795031;21.297961,60.795015;21.297946,60.794999;21.297937,60.794985;21.297929,60.794968;21.297924,60.79495;21.297921,60.794932;21.29792,60.794914;21.297921,60.7949;21.297923,60.794882;21.297926,60.794864;21.297931,60.794846;21.297938,60.794828;21.297948,60.794811;21.29796,60.794794;21.297975,60.794778;21.297979,60.794774;21.297998,60.794759;21.298018,60.794744;21.298041,60.79473;21.298113,60.794689;21.298117,60.794687;21.29814,60.794673;21.298185,60.794645;21.298206,60.79463;21.298226,60.794615;21.298244,60.794599;21.298259,60.794583;21.298269,60.794572;21.298281,60.794555;21.29829,60.794538;21.298298,60.79452;21.298304,60.794502;21.298308,60.794485;21.298319,60.794413;21.29832,60.794399;21.29832,60.794381;21.298318,60.794363;21.298312,60.794345;21.298298,60.794329;21.298294,60.794325;21.298272,60.794311;21.298249,60.794297;21.298227,60.794282;21.298211,60.794266;21.298203,60.794249;21.298204,60.794241;21.298209,60.794223;21.298216,60.794206;21.298222,60.794188;21.298215,60.794171;21.298179,60.794169;21.298143,60.794171;21.298106,60.794173;21.29807,60.79417;21.298061,60.794168;21.298037,60.794154;21.298025,60.794137;21.298022,60.79412;21.298023,60.794111;21.29803,60.794093;21.298044,60.794077;21.298063,60.794061;21.298104,60.794032;21.298115,60.794024;21.298238,60.793934;21.29826,60.79392;21.298275,60.793911;21.2983,60.793898;21.298326,60.793885;21.298353,60.793873;21.298382,60.793862;21.298411,60.793851;21.298424,60.793847;21.298455,60.793838;21.298487,60.793829;21.298652,60.79379;21.29866,60.793788;21.298724,60.793771;21.298756,60.793762;21.298786,60.793752;21.298816,60.793741;21.298844,60.79373;21.29887,60.793717;21.298893,60.793703;21.298897,60.793701;21.298918,60.793686;21.298937,60.793671;21.299006,60.793608;21.29901,60.793604;21.299029,60.793589;21.299049,60.793574;21.299071,60.793559;21.299094,60.793545;21.299118,60.793532;21.299143,60.793519;21.29917,60.793506;21.299198,60.793495;21.299288,60.793462;21.299315,60.79345;21.29933,60.793442;21.29938,60.793415;21.299407,60.793404;21.299437,60.793394;21.299471,60.793388;21.299506,60.793383;21.299543,60.793381;21.299579,60.793382;21.299612,60.793385;21.299683,60.793394;21.299719,60.793398;21.299735,60.793398;21.299772,60.793398;21.299808,60.793395;21.299843,60.79339;21.299878,60.793384;21.299897,60.79338;21.29993,60.793372;21.299961,60.793362;21.29999,60.793351;21.300017,60.793339;21.300041,60.793325;21.300056,60.793316;21.300098,60.793286;21.300122,60.793273;21.300151,60.793262;21.300185,60.793255;21.300195,60.793255;21.300232,60.793255;21.300266,60.793261;21.300282,60.793269;21.300294,60.793286;21.300293,60.793304;21.300286,60.793322;21.300274,60.793339;21.300257,60.793354;21.300236,60.793368;21.30021,60.793381;21.300179,60.793391;21.300147,60.7934;21.300114,60.793407;21.300045,60.793423;21.300012,60.793432;21.299981,60.793441;21.299953,60.793453;21.299929,60.793466;21.299908,60.793481;21.299893,60.793498;21.299883,60.793515;21.299876,60.793532;21.299874,60.79355;21.299876,60.793568;21.299883,60.793586;21.299897,60.793602;21.299919,60.793619;21.299943,60.793632;21.299972,60.793643;21.300004,60.793652;21.300038,60.793659;21.300073,60.793665;21.300251,60.793686;21.300268,60.793689;21.300584,60.793736;21.300618,60.79374;21.300654,60.793744;21.300726,60.793752;21.300798,60.793757;21.300871,60.793761;21.300879,60.793761;21.300915,60.793762;21.300952,60.793763;21.300989,60.793762;21.301025,60.793761;21.301062,60.79376;21.301098,60.793757;21.301134,60.793753;21.301169,60.793749;21.301204,60.793743;21.301235,60.793737;21.301268,60.793729;21.301431,60.793689;21.301449,60.793685;21.301483,60.793678;21.30176,60.793631;21.301794,60.793624;21.301817,60.793619;21.301849,60.793611;21.301881,60.793602;21.301912,60.793592;21.302035,60.793553;21.302045,60.79355;21.302257,60.79348;21.302271,60.793475;21.302457,60.793418;21.302489,60.793409;21.302522,60.793402;21.302556,60.793395;21.30259,60.793388;21.302611,60.793385;21.302646,60.793379;21.302896,60.79335;21.302926,60.793345;21.302996,60.793334;21.303064,60.793321;21.303164,60.793299;21.30319,60.793292;21.303486,60.793221;21.303587,60.7932;21.303795,60.793165;21.303821,60.793161;21.304101,60.793118;21.304133,60.793113;21.304239,60.793099;21.30431,60.793091;21.304346,60.793088;21.304493,60.79308;21.304565,60.793075;21.304601,60.793071;21.304625,60.793068;21.30466,60.793063;21.304694,60.793057;21.304728,60.79305;21.304761,60.793042;21.304826,60.793026;21.304842,60.793022;21.30506,60.792956;21.305092,60.792947;21.305156,60.792929;21.305189,60.792922;21.305223,60.792915;21.305258,60.79291;21.305295,60.792907;21.305333,60.792906;21.305369,60.792908;21.305405,60.79291;21.305441,60.792914;21.305584,60.79293;21.3056,60.792932;21.305709,60.792941;21.305745,60.792944;21.30578,60.792949;21.305814,60.792956;21.305847,60.792965;21.305877,60.792975;21.305906,60.792986;21.305961,60.79301;21.305976,60.793017;21.306004,60.793028;21.306117,60.793074;21.306122,60.793076;21.306152,60.793086;21.306213,60.793106;21.306244,60.793116;21.306277,60.793124;21.30631,60.793131;21.306322,60.793133;21.306357,60.793139;21.306392,60.793145;21.306533,60.793164;21.306552,60.793167;21.306587,60.793172;21.306724,60.793198;21.306743,60.793202;21.306845,60.793223;21.306878,60.793231;21.306909,60.79324;21.30694,60.79325;21.306947,60.793252;21.306976,60.793263;21.307003,60.793275;21.307135,60.793337;21.307155,60.793345;21.307267,60.793391;21.307294,60.793404;21.307298,60.793406;21.307324,60.793418;21.307351,60.79343;21.307384,60.793438;21.307413,60.79344;21.307449,60.793437;21.307519,60.793427;21.307549,60.793424;21.307585,60.793421;21.307622,60.793422;21.307657,60.793426;21.307679,60.793431;21.307708,60.793442;21.307732,60.793455;21.307751,60.793471;21.307766,60.793487;21.307778,60.793504;21.307785,60.793522;21.307787,60.793539;21.307784,60.793557;21.307775,60.793576;21.307761,60.793593;21.307742,60.793608;21.30772,60.793622;21.307694,60.793635;21.307664,60.793648;21.307607,60.79367;21.307579,60.793682;21.307555,60.793695;21.307536,60.793708;21.30752,60.793724;21.307511,60.793741;21.307509,60.793755;21.307513,60.793773;21.307522,60.79379;21.307534,60.793807;21.307547,60.793824;21.307575,60.793857;21.307588,60.793874;21.307599,60.793891;21.307605,60.793904;21.307622,60.793939;21.307634,60.793956;21.307651,60.793971;21.307677,60.793984;21.307695,60.793989;21.30773,60.793994;21.307801,60.794003;21.307819,60.794006;21.307852,60.794014;21.307882,60.794024;21.307909,60.794036;21.307932,60.79405;21.30795,60.794066;21.307962,60.794083;21.307968,60.7941;21.307967,60.794118;21.307961,60.794136;21.307949,60.794152;21.307937,60.794164;21.307916,60.794178;21.307871,60.794207;21.307859,60.794214;21.30784,60.794229;21.307823,60.794245;21.30781,60.794262;21.307804,60.79428;21.307804,60.794285;21.307807,60.794303;21.307815,60.79432;21.307826,60.794337;21.307839,60.794354;21.307852,60.79437;21.307865,60.794387;21.307923,60.794453;21.307956,60.794484;21.307968,60.794495;21.307987,60.79451;21.308008,60.794525;21.308029,60.794539;21.308053,60.794553;21.308078,60.794566;21.308106,60.794578;21.308118,60.794582;21.308149,60.794592;21.308244,60.794619;21.308268,60.794626;21.308299,60.794636;21.308329,60.794646;21.308358,60.794657;21.308386,60.794668;21.308412,60.794681;21.308435,60.794694;21.308457,60.794708;21.308476,60.794724;21.308493,60.79474;21.308506,60.794756;21.308516,60.794775;21.308523,60.794792;21.308539,60.794845;21.308546,60.794863;21.30855,60.794872;21.308561,60.794889;21.308575,60.794906;21.308591,60.794922;21.30861,60.794937;21.308619,60.794943;21.308641,60.794958;21.308711,60.794999;21.308731,60.795012;21.308817,60.79507;21.30884,60.795083;21.308854,60.79509;21.30888,60.795103;21.308908,60.795115;21.308937,60.795126;21.308997,60.795146;21.309009,60.79515;21.30907,60.79517;21.309099,60.795181;21.309124,60.795194;21.309144,60.795209;21.309157,60.795226;21.309165,60.795244;21.309172,60.795261;21.309181,60.795279;21.309192,60.795294;21.309207,60.79531;21.309261,60.795357;21.309278,60.795373;21.309293,60.795392;21.309347,60.795478;21.309355,60.795489;21.309382,60.795523;21.309391,60.79554;21.309395,60.795558;21.309393,60.795576;21.309384,60.795593;21.309361,60.795628;21.309358,60.795632;21.309347,60.795649;21.309337,60.795667;21.309331,60.795684;21.309329,60.795702;21.309334,60.79572;21.30934,60.795731;21.309355,60.795747;21.309377,60.795761;21.309394,60.795769;21.309424,60.795779;21.309456,60.795788;21.309473,60.795794;21.309564,60.795824;21.309625,60.795845;21.309654,60.795855;21.30968,60.795868;21.309704,60.795881;21.309708,60.795884;21.309727,60.7959;21.30974,60.795917;21.309743,60.795934;21.309742,60.795939;21.30973,60.795956;21.309714,60.795972;21.3097,60.795988;21.309693,60.796006;21.309694,60.796024;21.3097,60.796042;21.309709,60.796059;21.309711,60.796063;21.309733,60.796097;21.309759,60.79613;21.309804,60.79618;21.309837,60.796214;21.30989,60.796261;21.309909,60.796276;21.309929,60.796291;21.309951,60.796305;21.309975,60.79632;21.309999,60.796334;21.310024,60.796347;21.310076,60.796373;21.31013,60.796396;21.310303,60.796466;21.310317,60.796472;21.31037,60.796497;21.310395,60.79651;21.310419,60.796523;21.310442,60.796537;21.310463,60.796552;21.310482,60.796567;21.31049,60.796573;21.310506,60.796589;21.310521,60.796606;21.310533,60.796623;21.310543,60.79664;21.310552,60.796657;21.310559,60.796675;21.31056,60.796681;21.310564,60.796698;21.310567,60.796716;21.310567,60.796734;21.310566,60.796752;21.310562,60.79677;21.310557,60.796788;21.310548,60.796808;21.310537,60.796825;21.310525,60.796842;21.310511,60.796858;21.310495,60.796874;21.310486,60.796882;21.310467,60.796897;21.310366,60.796972;21.310355,60.796983;21.310284,60.797046;21.310263,60.79706;21.31024,60.797073;21.310213,60.797085;21.310185,60.797097;21.310068,60.79714;21.31005,60.797148;21.309892,60.797223;21.309837,60.797247;21.309811,60.79726;21.309798,60.797268;21.309778,60.797283;21.309722,60.79733;21.309702,60.797344;21.309679,60.797358;21.309654,60.797371;21.309627,60.797383;21.309598,60.797394;21.309588,60.797397;21.309557,60.797407;21.309524,60.797415;21.30949,60.797421;21.309455,60.797426;21.309419,60.79743;21.30938,60.797433;21.309343,60.797433;21.309307,60.797432;21.309271,60.797429;21.309235,60.797424;21.30921,60.797419;21.309142,60.797406;21.309106,60.797402;21.30907,60.797404;21.309063,60.797405;21.309032,60.797414;21.308974,60.797436;21.308941,60.797444;21.308916,60.797446;21.308879,60.797448;21.308843,60.797448;21.308833,60.797448;21.308797,60.797452;21.308762,60.797457;21.308728,60.797465;21.308696,60.797473;21.308668,60.79748;21.308637,60.797489;21.308606,60.797499;21.308576,60.797509;21.308549,60.797521;21.308542,60.797525;21.308489,60.79755;21.308462,60.797562;21.308435,60.797569;21.308402,60.797577;21.308334,60.79759;21.308301,60.797598;21.30827,60.797608;21.308243,60.79762;21.308225,60.797635;21.308222,60.797643;21.308222,60.797661;21.308225,60.797679;21.308228,60.797696;21.308228,60.797714;21.308226,60.797732;21.308223,60.79775;21.308223,60.797753;21.308218,60.797771;21.308207,60.797806;21.308191,60.797841;21.308186,60.797851;21.308143,60.79792;21.308133,60.797936;21.308093,60.798004;21.308085,60.79802;21.30805,60.79809;21.308044,60.7981;21.30802,60.798134;21.307979,60.798184;21.307966,60.798198;21.307924,60.798248;21.307899,60.798282;21.307893,60.79829;21.307871,60.798324;21.307858,60.798341;21.307844,60.798357;21.307833,60.798367;21.307757,60.798428;21.307742,60.798442;21.307726,60.798458;21.307711,60.798475;21.307672,60.798525;21.307667,60.79853;21.307628,60.798581;21.307617,60.798598;21.307609,60.798615;21.307603,60.798633;21.307601,60.798648;21.307601,60.798666;21.307604,60.798702;21.307604,60.798715;21.307602,60.798732;21.307599,60.79875;21.307594,60.798768;21.307586,60.798786;21.307576,60.798803;21.307569,60.798814;21.307555,60.79883;21.307524,60.798863;21.307509,60.798877;21.307473,60.798908;21.307454,60.798924;21.307432,60.798938;21.307358,60.79898;21.307335,60.798994;21.307315,60.799009;21.307306,60.799017;21.307291,60.799034;21.307237,60.7991;21.307221,60.799117;21.307203,60.799132;21.307179,60.799146;21.30715,60.799157;21.307116,60.799162;21.307103,60.799163;21.307067,60.799161;21.307032,60.799156;21.307001,60.799147;21.306978,60.799135;21.306958,60.799121;21.306939,60.799105;21.306934,60.799101;21.306912,60.799087;21.306888,60.799073;21.306862,60.799061;21.306833,60.79905;21.306803,60.79904;21.306771,60.799031;21.306734,60.799023;21.306699,60.799019;21.306662,60.799016;21.306626,60.799018;21.30662,60.799018;21.306585,60.799024;21.306552,60.799032;21.306525,60.799044;21.306507,60.799059;21.306502,60.799069;21.306499,60.799087;21.306498,60.799105;21.306493,60.799122;21.30649,60.799126;21.30647,60.799141;21.306443,60.799153;21.306385,60.799175;21.306358,60.799187;21.306338,60.799198;21.306314,60.799211;21.306282,60.799219;21.306274,60.799219;21.306241,60.799212;21.306211,60.799202;21.306196,60.799196;21.306166,60.799186;21.306135,60.799177;21.306103,60.799168;21.306085,60.799164;21.305985,60.799141;21.305964,60.799136;21.30593,60.799129;21.305895,60.799123;21.305859,60.799122;21.305823,60.799131;21.305794,60.799143;21.305767,60.799155;21.305737,60.799168;21.305707,60.799178;21.305673,60.799185;21.305644,60.799188;21.305607,60.799189;21.305571,60.799186;21.305538,60.799179;21.305508,60.799164;21.30549,60.799149;21.305478,60.799132;21.305456,60.799098;21.305443,60.799081;21.305423,60.799063;21.305402,60.799048;21.305377,60.799035;21.305349,60.799024;21.305319,60.799013;21.305292,60.799006;21.305259,60.798999;21.305225,60.798993;21.305119,60.798978;21.305096,60.798974;21.305061,60.798969;21.305026,60.798963;21.304994,60.798955;21.304965,60.798944;21.304941,60.798931;21.304923,60.798916;21.304906,60.7989;21.304891,60.798883;21.304886,60.798877;21.30487,60.798861;21.304852,60.798846;21.304829,60.798832;21.304823,60.798828;21.304768,60.798805;21.304744,60.798791;21.304735,60.798783;21.304724,60.798766;21.30472,60.798748;21.304716,60.79873;21.304715,60.798722;21.304701,60.79865;21.304697,60.798615;21.304699,60.798594;21.304711,60.798577;21.304739,60.798567;21.304772,60.79856;21.304807,60.798554;21.30484,60.798546;21.304865,60.798532;21.304879,60.798516;21.304885,60.798498;21.304885,60.79848;21.304881,60.798462;21.304879,60.798459;21.30487,60.798441;21.304856,60.798425;21.304837,60.79841;21.304814,60.798396;21.304786,60.798384;21.304761,60.798375;21.304728,60.798367;21.304694,60.798361;21.30466,60.798355;21.304646,60.798352;21.304541,60.798336;21.304505,60.798332;21.304469,60.798328;21.304431,60.798324;21.304398,60.798317;21.304383,60.79831;21.304361,60.798296;21.304338,60.798282;21.304324,60.798276;21.304291,60.798268;21.304255,60.798264;21.304244,60.798263;21.304171,60.798257;21.304136,60.798253;21.30413,60.798252;21.304097,60.798244;21.304032,60.798227;21.303998,60.79822;21.303977,60.798218;21.30394,60.798217;21.303904,60.798219;21.303868,60.798223;21.303833,60.798228;21.303798,60.798234;21.303776,60.798238;21.30364,60.798266;21.303571,60.798278;21.303536,60.798284;21.303513,60.798287;21.303505,60.798288;21.303435,60.7983;21.3034,60.798305;21.303364,60.798309;21.303328,60.798306;21.303311,60.798291;21.303309,60.798276;21.303282,60.798269;21.303249,60.798277;21.30316,60.798309;21.303151,60.798312;21.30312,60.798321;21.303087,60.798329;21.303052,60.798335;21.303016,60.798337;21.302979,60.798335;21.302944,60.79833;21.302912,60.798324;21.302845,60.79831;21.30281,60.798305;21.302774,60.798308;21.302757,60.798314;21.302738,60.798329;21.302725,60.798346;21.302714,60.798363;21.302709,60.798373;21.302701,60.798391;21.302695,60.798408;21.302692,60.798426;21.302691,60.798429;21.30269,60.798447;21.302691,60.798465;21.302696,60.798483;21.302698,60.798487;21.302709,60.798505;21.302732,60.798538;21.302742,60.798556;21.302745,60.798562;21.30275,60.79858;21.302752,60.798598;21.302751,60.798615;21.30275,60.798633;21.302747,60.79865;21.302734,60.798721;21.302731,60.798735;21.302722,60.798789;21.302717,60.798806;21.30271,60.798824;21.3027,60.798841;21.302687,60.798858;21.302672,60.798874;21.302663,60.798882;21.302643,60.798897;21.302556,60.798955;21.302537,60.79897;21.302525,60.798981;21.302493,60.799013;21.302474,60.799028;21.30245,60.799042;21.302422,60.799053;21.302411,60.799057;21.302377,60.799064;21.302341,60.799067;21.302305,60.799065;21.302274,60.799054;21.302252,60.79904;21.302217,60.799008;21.302199,60.798993;21.30219,60.798986;21.302166,60.798973;21.302139,60.798961;21.302108,60.798951;21.302074,60.798944;21.302038,60.798941;21.302017,60.798942;21.301982,60.798946;21.301911,60.798956;21.301875,60.798959;21.301841,60.798961;21.301805,60.798963;21.301772,60.79897;21.30177,60.798978;21.301784,60.798994;21.301823,60.799025;21.301829,60.79903;21.301844,60.799047;21.301855,60.799064;21.301861,60.799082;21.30186,60.799099;21.301853,60.799117;21.301841,60.799133;21.301824,60.799149;21.301802,60.799163;21.301778,60.799176;21.301749,60.799188;21.301731,60.799194;21.301698,60.799202;21.301662,60.799206;21.301625,60.799205;21.301592,60.7992;21.301558,60.799193;21.301524,60.799188;21.301488,60.799188;21.301482,60.79919;21.30146,60.799205;21.301444,60.799221;21.301423,60.799236;21.301419,60.799238;21.301388,60.799248;21.301321,60.799262;21.30129,60.799272;21.301272,60.799285;21.301261,60.799303;21.301254,60.79932;21.301243,60.799358;21.30124,60.799375;21.301239,60.799393;21.30124,60.799411;21.301242,60.799421;21.30125,60.799457;21.301251,60.799475;21.301247,60.799492;21.301246,60.799496;21.301235,60.799513;21.301218,60.799529;21.301197,60.799543;21.301171,60.799556;21.301142,60.799567;21.301115,60.799574;21.301081,60.79958;21.301045,60.799584;21.301009,60.799586;21.300973,60.799586;21.300936,60.799585;21.3009,60.799581;21.300866,60.799575;21.300854,60.799572;21.300824,60.799561;21.300742,60.799525;21.300716,60.799516;21.300686,60.799506;21.30056,60.799468;21.30053,60.799458;21.300416,60.799411;21.300387,60.799401;21.300355,60.799392;21.30032,60.799387;21.300283,60.799386;21.300248,60.799391;21.300221,60.799398;21.300197,60.799411;21.300199,60.799427;21.300213,60.799443;21.300229,60.799459;21.300239,60.799476;21.300238,60.799484;21.300224,60.799501;21.300197,60.799512;21.300177,60.799515;21.300141,60.799513;21.300108,60.799506;21.300097,60.799502;21.300072,60.799489;21.300052,60.799474;21.300034,60.799459;21.300015,60.799442;21.299995,60.799427;21.299973,60.799413;21.299949,60.799399;21.299936,60.799393;21.299884,60.799367;21.29986,60.799354;21.299841,60.799339;21.299832,60.799321;21.299836,60.799304;21.299847,60.79929;21.299869,60.799276;21.2999,60.799267;21.299928,60.799273;21.299955,60.799285;21.299981,60.799298;21.300011,60.799308;21.300039,60.799311;21.300075,60.799308;21.300105,60.799298;21.30012,60.799285;21.300125,60.799267;21.300121,60.799249;21.300118,60.799243;21.300105,60.799226;21.300088,60.79921;21.300071,60.799195;21.300055,60.799178;21.300043,60.799162;21.300039,60.799153;21.300036,60.799135;21.300034,60.799099;21.300033,60.799081;21.300026,60.799064;21.300013,60.799047;21.299989,60.799033;21.299979,60.79903;21.299946,60.799022;21.29991,60.799019;21.299873,60.79902;21.29984,60.799027;21.299831,60.799031;21.299811,60.799046;21.299783,60.799079;21.299764,60.799094;21.29975,60.7991;21.299716,60.799107;21.299679,60.799109;21.299643,60.799108;21.299606,60.799107;21.299565,60.799105;21.299529,60.799104;21.299492,60.799105;21.299459,60.799113;21.299447,60.799118;21.299426,60.799133;21.299395,60.799166;21.299389,60.799171;21.299369,60.799186;21.299345,60.799199;21.299318,60.799212;21.29929,60.799223;21.299259,60.799233;21.299245,60.799238;21.299213,60.799246;21.29918,60.799254;21.299146,60.799261;21.299111,60.799266;21.299075,60.79927;21.299039,60.799271;21.299002,60.799269;21.298976,60.799267"})
                                        (mock/header "Authorization" docstore-user))))
              ok-response)))))

(deftest docstore-user-cant-access-anything-if-no-orgs-from-api
  (with-redefs-fn
    {#'onkalo.metadata.elastic-api/find-documents (fn [_ organization _ _ _ _ _ _]
                                                    (when (= organization ["186-R" "753-R"])
                                                      {:results ["foo"]}))
     #'onkalo.util.lupapiste-api/docstore-enabled-orgs (fn [_] nil)}
    #(do
       (is (= (decode-body (handler (-> (mock/request :get (endpoint "search"))
                                        (mock/header "Authorization" docstore-user))))
              error-response))
       (is (= (decode-body (handler (-> (mock/request :get (endpoint "search") {:organization ["186-R" "753-R"]})
                                        (mock/header "Authorization" docstore-user))))
              error-response)))))

(deftest docstore-user-cant-access-wrong-organization
  (with-redefs-fn
    {#'onkalo.util.lupapiste-api/docstore-enabled-orgs (fn [_] ["753-R"])}
    #(do
       (is (= (decode-body (handler (-> (mock/request :get (endpoint "search") {:organization "186-R"})
                                        (mock/header "Authorization" docstore-user))))
              forbidden-response))
       (is (= (decode-body (handler (-> (mock/request :get (endpoint "foobar") {:organization "186-R"})
                                        (mock/header "Authorization" docstore-user))))
              forbidden-response)))))

(deftest organization-with-public-only-or-docstore-only-can-only-access-public-documents
  (let [public-ids ["public" "previously-secret" "secret4"]
        secret-ids ["secret1" "secret2" "secret3" "secret5"]
        ok-response2 {:status 200 :body "data" :headers {"Content-Type" "text/plain; charset=utf-8"}}
        api-usage-messages (atom 0)]
    (with-redefs-fn {#'onkalo.storage.document/get-document            (fn [& _] {:status 200
                                                                     :body                "data"
                                                                     :headers             {"Content-Type" "text/plain"}})
                     #'onkalo.util.log-api-usage/log-api-usage         (fn [_ _ _ _ _] (swap! api-usage-messages inc))
                     #'onkalo.metadata.xmp-processor/remove-metadata   (fn [& _] "data")
                     #'onkalo.util.lupapiste-api/docstore-enabled-orgs (fn [_] ["753-R" "186-R"])
                     #'onkalo.metadata.elastic-api/get-document        (fn [_ _ id]
                                                                  (let [base-response {:metadata {:julkisuusluokka "julkinen"
                                                                                                  :nakyvyys "julkinen"
                                                                                                  :myyntipalvelu true
                                                                                                  :henkilotiedot "ei-sisalla"}}]
                                                                    (case id
                                                                      "public" base-response
                                                                      "secret1" (assoc-in base-response [:metadata :nakyvyys] "viranomainen")
                                                                      "secret2" (assoc-in base-response [:metadata :myyntipalvelu] false)
                                                                      "secret3" (meta-merge base-response {:metadata {:julkisuusluokka "salainen"
                                                                                                                      :security-period-end "9999-01-01T12:00:00.000Z"}})
                                                                      "secret4" (assoc-in base-response [:metadata :henkilotiedot] "sisaltaa")
                                                                      "secret5" (assoc-in base-response [:metadata :henkilotiedot] "sisaltaa-arkaluonteisia")
                                                                      "previously-secret"  (meta-merge base-response {:metadata {:julkisuusluokka "salainen"
                                                                                                                                 :security-period-end "2016-01-01T12:00:00.000Z"}})
                                                                      "deleted" (assoc-in base-response [:metadata :deleted] "2018-03-26T20:44:10.885Z"))))}
      #(do (doseq [id public-ids]
             (is (= (decode-body (handler (-> (mock/request :get (endpoint id) {:organization "753-R"})
                                              (mock/header "Authorization" docstore-user))))
                    ok-response2)))
           (doseq [id secret-ids]
             (is (= (decode-body (handler (-> (mock/request :get (endpoint id) {:organization "753-R"})
                                              (mock/header "Authorization" docstore-user))))
                    forbidden-response-2)))
           (is (= @api-usage-messages
                  (count public-ids)))

           (let [id "deleted"]
             (is (= (decode-body (handler (-> (mock/request :get (endpoint id) {:organization "753-R"})
                                              (mock/header "Authorization" docstore-user))))
                    not-found-response)))))))

(deftest docstore-test-user-downloads-are-not-billed
  (let [public-ids ["public"]
        ok-response2 {:status 200 :body "data" :headers {"Content-Type" "text/plain; charset=utf-8"}}
        api-usage-messages (atom 0)]
    (with-redefs-fn {#'onkalo.storage.document/get-document            (fn [& _] {:status 200
                                                                     :body                "data"
                                                                     :headers             {"Content-Type" "text/plain"}})
                     #'onkalo.util.log-api-usage/log-api-usage         (fn [_ _ _ _ _] (swap! api-usage-messages inc))
                     #'onkalo.metadata.xmp-processor/remove-metadata   (fn [& _] "data")
                     #'onkalo.util.lupapiste-api/docstore-enabled-orgs (fn [_] ["753-R" "186-R"])
                     #'onkalo.metadata.elastic-api/get-document        (fn [_ _ id]
                                                                  {:metadata {:julkisuusluokka "julkinen"
                                                                              :nakyvyys "julkinen"
                                                                              :myyntipalvelu true
                                                                              :henkilotiedot "ei-sisalla"}})}
      #(do (doseq [id public-ids]
             (is (= (decode-body (handler (-> (mock/request :get (endpoint id) {:organization "753-R"})
                                              (mock/header "Authorization" docstore-non-billing-user))))
                    ok-response2)))
           (is (= @api-usage-messages 0))))))

(defn status-is [code response]
  (-> response decode-body :status (= code)))

(deftest docstore-previews-are-disallowed-for-some-document-types
  (with-redefs-fn
    {#'onkalo.storage.document/document-metadata       (fn [_ doc-id _ _ _]
                                                         (case doc-id
                                                           "doc-ok" {:status 200 :body {:metadata {:type "muut.energiatodistus"}}}
                                                           "doc-not-found" {:status 404 :body {}}
                                                           "doc-disallowed" {:status 200 :body {:metadata {:type "osapuolet.cv"}}}
                                                           "doc-empty" {:status 200}))
     #'onkalo.util.lupapiste-api/docstore-enabled-orgs (fn [_]
                                                         ["753-R"])
     #'onkalo.storage.document/get-preview             (fn [_ doc-id _]
                                                         (case doc-id
                                                           ("doc-ok" "doc-empty") {:status 200}))
     #'onkalo.metadata.elastic-api/get-document        (fn [_ _ doc-id]
                                                         {:metadata {:julkisuusluokka "julkinen"
                                                                     :nakyvyys        "julkinen"
                                                                     :myyntipalvelu   true
                                                                     :henkilotiedot   "ei-sisalla"}})
     #'onkalo.util.image-resize/scale                  (fn [is _] is)}
    #(doseq [[doc-id code] [["doc-ok" 200]
                            ["doc-not-found" 404]
                            ["doc-disallowed" 403]
                            ["doc-empty" 200]]]
       (testing (format "Preview %s: %s" doc-id code)
         (is (status-is code (handler (-> (mock/request :get (endpoint (str doc-id "/preview")) {:organization "753-R"})
                                          (mock/header "Authorization" docstore-user)))))))))
